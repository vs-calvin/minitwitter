// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vPEKH7ieBw9Sjdb6MYWDd6
// Component: NK-6wG0fpR2
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Post from "../../Post"; // plasmic-import: zbsjwzPGUgQ/component
import Fab from "../../Fab"; // plasmic-import: sj3ZyowCADD/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_minitwitter.module.css"; // plasmic-import: vPEKH7ieBw9Sjdb6MYWDd6/projectcss
import sty from "./PlasmicFeed.module.css"; // plasmic-import: NK-6wG0fpR2/css

export type PlasmicFeed__VariantMembers = {};

export type PlasmicFeed__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeed__VariantsArgs;
export const PlasmicFeed__VariantProps = new Array<VariantPropType>();

export type PlasmicFeed__ArgsType = {};
type ArgPropType = keyof PlasmicFeed__ArgsType;
export const PlasmicFeed__ArgProps = new Array<ArgPropType>();

export type PlasmicFeed__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  postList?: p.Flex<"div">;
  addButton?: p.Flex<typeof Fab>;
};

export interface DefaultFeedProps {
  className?: string;
}

function PlasmicFeed__RenderFunc(props: {
  variants: PlasmicFeed__VariantsArgs;
  args: PlasmicFeed__ArgsType;
  overrides: PlasmicFeed__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Minitwitter"}
          </div>

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"postList"}
              data-plasmic-override={overrides.postList}
              hasGap={true}
              className={classNames(projectcss.all, sty.postList)}
            >
              <Post
                className={classNames("__wab_instance", sty.post__vsGw)}
                timestamp={"1 hour ago"}
              >
                {"What state management framework do you use for React?"}
              </Post>

              <Post
                className={classNames("__wab_instance", sty.post__vOaDo)}
                timestamp={"2 hours ago"}
              >
                {"Hello world!"}
              </Post>

              <Post
                className={classNames("__wab_instance", sty.post__ipZk6)}
                timestamp={"3 hours ago"}
              >
                {"What state management framework do you use for React?"}
              </Post>
            </p.Stack>

            <Fab
              data-plasmic-name={"addButton"}
              data-plasmic-override={overrides.addButton}
              className={classNames("__wab_instance", sty.addButton)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "freeBox", "postList", "addButton"],
  text: ["text"],
  freeBox: ["freeBox", "postList", "addButton"],
  postList: ["postList"],
  addButton: ["addButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  freeBox: "div";
  postList: "div";
  addButton: typeof Fab;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeed__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeed__VariantsArgs;
    args?: PlasmicFeed__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeed__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFeed__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFeed__ArgProps,
      internalVariantPropNames: PlasmicFeed__VariantProps
    });

    return PlasmicFeed__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeed";
  } else {
    func.displayName = `PlasmicFeed.${nodeName}`;
  }
  return func;
}

export const PlasmicFeed = Object.assign(
  // Top-level PlasmicFeed renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    postList: makeNodeComponent("postList"),
    addButton: makeNodeComponent("addButton"),

    // Metadata about props expected for PlasmicFeed
    internalVariantProps: PlasmicFeed__VariantProps,
    internalArgProps: PlasmicFeed__ArgProps
  }
);

export default PlasmicFeed;
/* prettier-ignore-end */
