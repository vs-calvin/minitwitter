// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vPEKH7ieBw9Sjdb6MYWDd6
// Component: 7UP5b9K-7W7
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: g6OHnTc4DK1/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_minitwitter.module.css"; // plasmic-import: vPEKH7ieBw9Sjdb6MYWDd6/projectcss
import sty from "./PlasmicNewPost.module.css"; // plasmic-import: 7UP5b9K-7W7/css

export type PlasmicNewPost__VariantMembers = {};

export type PlasmicNewPost__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPost__VariantsArgs;
export const PlasmicNewPost__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPost__ArgsType = {};
type ArgPropType = keyof PlasmicNewPost__ArgsType;
export const PlasmicNewPost__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPost__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  postContent?: p.Flex<"textarea">;
  postButton?: p.Flex<typeof Button>;
};

export interface DefaultNewPostProps {
  className?: string;
}

function PlasmicNewPost__RenderFunc(props: {
  variants: PlasmicNewPost__VariantsArgs;
  args: PlasmicNewPost__ArgsType;
  overrides: PlasmicNewPost__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Minitwitter"}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___9KLg)}>
            <div className={classNames(projectcss.all, sty.freeBox__uxPe)}>
              <div className={classNames(projectcss.all, sty.freeBox__tdMja)}>
                <textarea
                  data-plasmic-name={"postContent"}
                  data-plasmic-override={overrides.postContent}
                  className={classNames(
                    projectcss.all,
                    projectcss.textarea,
                    sty.postContent
                  )}
                  placeholder={"What's on your mind?" as const}
                />
              </div>

              <Button
                data-plasmic-name={"postButton"}
                data-plasmic-override={overrides.postButton}
                className={classNames("__wab_instance", sty.postButton)}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "postContent", "postButton"],
  text: ["text"],
  postContent: ["postContent"],
  postButton: ["postButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  postContent: "textarea";
  postButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPost__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPost__VariantsArgs;
    args?: PlasmicNewPost__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewPost__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNewPost__ArgProps,
      internalVariantPropNames: PlasmicNewPost__VariantProps
    });

    return PlasmicNewPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPost";
  } else {
    func.displayName = `PlasmicNewPost.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPost = Object.assign(
  // Top-level PlasmicNewPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    postContent: makeNodeComponent("postContent"),
    postButton: makeNodeComponent("postButton"),

    // Metadata about props expected for PlasmicNewPost
    internalVariantProps: PlasmicNewPost__VariantProps,
    internalArgProps: PlasmicNewPost__ArgProps
  }
);

export default PlasmicNewPost;
/* prettier-ignore-end */
